<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;CucumberTask&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.cucumber&lt;/groupId&gt;&#10;            &lt;artifactId&gt;cucumber-java&lt;/artifactId&gt;&#10;            &lt;version&gt;7.27.2&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.cucumber&lt;/groupId&gt;&#10;            &lt;artifactId&gt;cucumber-testng&lt;/artifactId&gt;&#10;            &lt;version&gt;7.27.2&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;&#10;        &lt;!-- Selenium --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;&#10;            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;&#10;            &lt;version&gt;4.35.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- WebDriverManager for driver binaries --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.github.bonigarcia&lt;/groupId&gt;&#10;            &lt;artifactId&gt;webdrivermanager&lt;/artifactId&gt;&#10;            &lt;version&gt;6.2.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- TestNG --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/org.testng/testng --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testng&lt;/groupId&gt;&#10;            &lt;artifactId&gt;testng&lt;/artifactId&gt;&#10;            &lt;version&gt;7.11.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Allure Cucumber7 JVM --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-cucumber7-jvm --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.qameta.allure&lt;/groupId&gt;&#10;            &lt;artifactId&gt;allure-cucumber7-jvm&lt;/artifactId&gt;&#10;            &lt;version&gt;2.29.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Allure TestNG --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-testng --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.qameta.allure&lt;/groupId&gt;&#10;            &lt;artifactId&gt;allure-testng&lt;/artifactId&gt;&#10;            &lt;version&gt;2.29.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;CucumberTask&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.cucumber&lt;/groupId&gt;&#10;            &lt;artifactId&gt;cucumber-java&lt;/artifactId&gt;&#10;            &lt;version&gt;7.27.2&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-testng --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.cucumber&lt;/groupId&gt;&#10;            &lt;artifactId&gt;cucumber-testng&lt;/artifactId&gt;&#10;            &lt;version&gt;7.27.2&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;&#10;        &lt;!-- Selenium --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;&#10;            &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;&#10;            &lt;version&gt;4.35.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- WebDriverManager for driver binaries --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.github.bonigarcia&lt;/groupId&gt;&#10;            &lt;artifactId&gt;webdrivermanager&lt;/artifactId&gt;&#10;            &lt;version&gt;6.2.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- TestNG --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/org.testng/testng --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.testng&lt;/groupId&gt;&#10;            &lt;artifactId&gt;testng&lt;/artifactId&gt;&#10;            &lt;version&gt;7.11.0&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- Allure Cucumber7 JVM --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-cucumber7-jvm --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.qameta.allure&lt;/groupId&gt;&#10;            &lt;artifactId&gt;allure-cucumber7-jvm&lt;/artifactId&gt;&#10;            &lt;version&gt;2.29.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;!-- Allure TestNG --&gt;&#10;        &lt;!-- https://mvnrepository.com/artifact/io.qameta.allure/allure-testng --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;io.qameta.allure&lt;/groupId&gt;&#10;            &lt;artifactId&gt;allure-testng&lt;/artifactId&gt;&#10;            &lt;version&gt;2.29.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;io.qameta.allure&lt;/groupId&gt;&#10;                &lt;artifactId&gt;allure-maven&lt;/artifactId&gt;&#10;                &lt;version&gt;2.11.2&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/pages/LoginPage.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/pages/LoginPage.java" />
              <option name="updatedContent" value="package pages;&#10;&#10;import org.openqa.selenium.By;&#10;import org.openqa.selenium.WebDriver;&#10;&#10;public class LoginPage {&#10;    private WebDriver driver;&#10;    private By usernameField = By.id(&quot;user-name&quot;);&#10;    private By passwordField = By.id(&quot;password&quot;);&#10;    private By loginButton = By.id(&quot;login-button&quot;);&#10;&#10;    public LoginPage(WebDriver driver) {&#10;        this.driver = driver;&#10;    }&#10;&#10;    public void login(String username, String password) {&#10;        driver.findElement(usernameField).sendKeys(username);&#10;        driver.findElement(passwordField).sendKeys(password);&#10;        driver.findElement(loginButton).click();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/runner/TestRunner.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/runner/TestRunner.java" />
              <option name="originalContent" value="package runner;&#10;&#10;import io.cucumber.testng.AbstractTestNGCucumberTests;&#10;import io.cucumber.testng.CucumberOptions;&#10;&#10;@CucumberOptions(&#10;        features = &quot;src/test/resources/features&quot;,&#10;        glue = {&quot;stepdefinitions&quot;, &quot;pages&quot;},&#10;        plugin = {&quot;pretty&quot;, &quot;html:target/cucumber-report.html&quot;}&#10;)&#10;public class TestRunner extends AbstractTestNGCucumberTests {&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package runner;&#10;&#10;import io.cucumber.testng.AbstractTestNGCucumberTests;&#10;import io.cucumber.testng.CucumberOptions;&#10;&#10;@CucumberOptions(&#10;        features = &quot;src/test/resources/features&quot;,&#10;        glue = {&quot;stepdefinitions&quot;, &quot;pages&quot;},&#10;        plugin = {&#10;            &quot;pretty&quot;,&#10;            &quot;html:target/cucumber-report.html&quot;,&#10;            &quot;io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm&quot;&#10;        }&#10;)&#10;public class TestRunner extends AbstractTestNGCucumberTests {&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/stepdefinitions/LoginSteps.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/stepdefinitions/LoginSteps.java" />
              <option name="originalContent" value=" package stepdefinitions;&#10;&#10;import io.cucumber.java.en.Given;&#10;import io.cucumber.java.en.When;&#10;import io.cucumber.java.en.Then;&#10;import io.qameta.allure.Allure;&#10;import org.openqa.selenium.OutputType;&#10;import org.openqa.selenium.TakesScreenshot;&#10;import org.openqa.selenium.WebDriver;&#10;import org.openqa.selenium.chrome.ChromeDriver;&#10;import io.github.bonigarcia.wdm.WebDriverManager;&#10;import pages.LoginPage;&#10;import org.testng.Assert;&#10;&#10;import java.io.ByteArrayInputStream;&#10;&#10; public class LoginSteps {&#10;    private WebDriver driver;&#10;    private LoginPage loginPage;&#10;&#10;    @Given(&quot;I am on the saucedemo login page&quot;)&#10;    public void i_am_on_the_saucedemo_login_page() {&#10;        WebDriverManager.chromedriver().setup();&#10;        driver = new ChromeDriver();&#10;        driver.get(&quot;https://www.saucedemo.com/&quot;);&#10;        driver.manage().window().maximize();&#10;        loginPage = new LoginPage(driver);&#10;        Allure.addAttachment(&quot;Login Page&quot;,new ByteArrayInputStream(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;    @When(&quot;I login with username {string} and password {string}&quot;)&#10;    public void i_login_with_username_and_password(String username, String password) {&#10;        loginPage.login(username, password);&#10;        if(username == &quot;locked_out_user&quot;){&#10;            Allure.addAttachment(&quot;Login Page Error&quot;,new ByteArrayInputStream(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)));&#10;            driver.quit();&#10;        }&#10;    }&#10;&#10;    @Then(&quot;I should see the products page&quot;)&#10;    public void i_should_see_the_products_page() {&#10;        Assert.assertTrue(driver.getCurrentUrl().contains(&quot;inventory.html&quot;));&#10;        Allure.addAttachment(&quot;Product Page&quot;,new  ByteArrayInputStream(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)));&#10;        driver.quit();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value=" package stepdefinitions;&#10;&#10;import io.cucumber.java.en.Given;&#10;import io.cucumber.java.en.When;&#10;import io.cucumber.java.en.Then;&#10;import io.qameta.allure.Allure;&#10;import org.openqa.selenium.OutputType;&#10;import org.openqa.selenium.TakesScreenshot;&#10;import org.openqa.selenium.WebDriver;&#10;import org.openqa.selenium.chrome.ChromeDriver;&#10;import io.github.bonigarcia.wdm.WebDriverManager;&#10;import pages.LoginPage;&#10;import org.testng.Assert;&#10;&#10;import java.io.ByteArrayInputStream;&#10;&#10; public class LoginSteps {&#10;    private WebDriver driver;&#10;    private LoginPage loginPage;&#10;&#10;    @Given(&quot;I am on the saucedemo login page&quot;)&#10;    public void i_am_on_the_saucedemo_login_page() {&#10;        WebDriverManager.chromedriver().setup();&#10;        driver = new ChromeDriver();&#10;        driver.get(&quot;https://www.saucedemo.com/&quot;);&#10;        driver.manage().window().maximize();&#10;        loginPage = new LoginPage(driver);&#10;        Allure.addAttachment(&quot;Login Page&quot;,new ByteArrayInputStream(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;    @When(&quot;I login with username {string} and password {string}&quot;)&#10;    public void i_login_with_username_and_password(String username, String password) {&#10;        loginPage.login(username, password);&#10;        if(username == &quot;locked_out_user&quot;){&#10;            Allure.addAttachment(&quot;Login Page Error&quot;,new ByteArrayInputStream(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)));&#10;            driver.quit();&#10;        }&#10;    }&#10;&#10;    @Then(&quot;I should see the products page&quot;)&#10;    public void i_should_see_the_products_page() {&#10;        Assert.assertTrue(driver.getCurrentUrl().contains(&quot;inventory.html&quot;));&#10;        Allure.addAttachment(&quot;Product Page&quot;,new  ByteArrayInputStream(((TakesScreenshot)driver).getScreenshotAs(OutputType.BYTES)));&#10;        driver.quit();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/java/stepdefinitions/RegistrationSteps.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/stepdefinitions/RegistrationSteps.java" />
              <option name="originalContent" value="package stepdefinitions;&#10;&#10;import io.cucumber.datatable.DataTable;&#10;import io.cucumber.java.en.*;&#10;import io.qameta.allure.Allure;&#10;import org.openqa.selenium.*;&#10;import org.openqa.selenium.chrome.ChromeDriver;&#10;import io.github.bonigarcia.wdm.WebDriverManager;&#10;import org.openqa.selenium.edge.EdgeDriver;&#10;import org.openqa.selenium.support.ui.ExpectedConditions;&#10;import org.openqa.selenium.support.ui.WebDriverWait;&#10;import pages.LoginPage;&#10;import org.testng.Assert;&#10;&#10;import java.io.ByteArrayInputStream;&#10;import java.time.Duration;&#10;import java.util.Map;&#10;&#10;public class RegistrationSteps {&#10;    private WebDriver driver;&#10;    private LoginPage loginPage;&#10;&#10;&#10;    @Given(&quot;I am on the Ndosi Automation homepage&quot;)&#10;    public void i_am_on_the_ndosiautomation_home_page() {&#10;        WebDriverManager.chromedriver().setup();&#10;        driver = new ChromeDriver();&#10;        driver.get(&quot;https://gray-island-0bd788c1e.2.azurestaticapps.net/#overview&quot;);&#10;        driver.manage().window().maximize();&#10;        Allure.addAttachment(&quot;Home Page&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;    @When(&quot;I click on the \&quot;Learning Materials\&quot; tab&quot;)&#10;    public void i_click_on_the_learning_materials_tab() {&#10;        driver.findElement(By.xpath(&quot;//button[contains(@class, 'nav-btn') and normalize-space(text())='Learning Materials']&quot;)).click();&#10;        Allure.addAttachment(&quot;Learning Materials Page&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;    @And(&quot;I click on the \&quot;Sign Up\&quot; button&quot;)&#10;    public void i_click_on_the_signup_button() {&#10;        driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Sign Up Here']&quot;)).click();&#10;    }&#10;&#10;&#10;    @And(&quot;I fill in the registration form with valid details&quot;)&#10;    public void i_fill_in_the_registration_form_with_valid_details(DataTable dataTable) {&#10;        Map&lt;String, String&gt; formData = dataTable.asMap(String.class, String.class);&#10;&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='First Name' and @type='text']&quot;)).sendKeys(formData.get(&quot;FirstName&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Last Name' and @type='text']&quot;)).sendKeys(formData.get(&quot;LastName&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Email' and @type='email']&quot;)).sendKeys(formData.get(&quot;Email&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Password' and @type='password']&quot;)).sendKeys(formData.get(&quot;Password&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Confirm Password' and @type='password']&quot;)).sendKeys(formData.get(&quot;ConfirmPassword&quot;));&#10;&#10;        Allure.addAttachment(&quot;Filled Registration Form&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;&#10;    @And(&quot;I submit the registration form&quot;)&#10;    public void i_submit_the_registration_form() {&#10;        driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Create Account']&quot;)).click();&#10;    }&#10;&#10;    @Then(&quot;I should see a confirmation message \&quot;Registration successful! Please login with your credentials\&quot;&quot;)&#10;    public void i_should_see_a_confirmation_message() {&#10;        // Wait for the confirmation message to be visible&#10;        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));&#10;        WebElement confirmationMessage = wait.until(ExpectedConditions.visibilityOfElementLocated(&#10;                By.xpath(&quot;//*[contains(text(),'Registration successful! Please login with your credentials')]&quot;)&#10;        ));&#10;&#10;        String popupText = confirmationMessage.getText();&#10;        System.out.println(&quot;Pop-up message: &quot; + popupText);&#10;        Assert.assertEquals(popupText, &quot;Registration successful! Please login with your credentials.&quot;);&#10;&#10;        // Click the &quot;Ok&quot; button if it's part of the modal&#10;        WebElement okButton = driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Ok']&quot;));&#10;        okButton.click();&#10;&#10;        // Attach screenshot to Allure&#10;        Allure.addAttachment(&quot;Confirmation Message&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;    @When(&quot;I enter my password to log in&quot;)&#10;    public void i_enter_my_password_to_log_in(String password) {&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Password' and @type='password']\&quot;&quot;)).sendKeys(password);&#10;&#10;    }&#10;&#10;    @And(&quot;I submit the login form&quot;)&#10;    public void i_submit_the_login_form() {&#10;        driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Login']&quot;)).click();&#10;&#10;    }&#10;&#10;    @Then(&quot;I should be logged in and see the logout button&quot;)&#10;    public void i_should_be_logged_in_and_see_the_logout_button() {&#10;        boolean isLogoutButtonPresent = driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Logout']&quot;)).isDisplayed();&#10;        Assert.assertTrue(isLogoutButtonPresent, &quot;Logout button is not displayed, login might have failed.&quot;);&#10;        Allure.addAttachment(&quot;Logout Button Visible&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;        driver.quit();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package stepdefinitions;&#10;&#10;import io.cucumber.datatable.DataTable;&#10;import io.cucumber.java.en.*;&#10;import io.qameta.allure.Allure;&#10;import org.openqa.selenium.*;&#10;import org.openqa.selenium.chrome.ChromeDriver;&#10;import io.github.bonigarcia.wdm.WebDriverManager;&#10;import org.openqa.selenium.edge.EdgeDriver;&#10;import org.openqa.selenium.support.ui.ExpectedConditions;&#10;import org.openqa.selenium.support.ui.WebDriverWait;&#10;import pages.LoginPage;&#10;import org.testng.Assert;&#10;&#10;import java.io.ByteArrayInputStream;&#10;import java.time.Duration;&#10;import java.util.Map;&#10;&#10;public class RegistrationSteps {&#10;    private WebDriver driver;&#10;    private LoginPage loginPage;&#10;&#10;&#10;    @Given(&quot;I am on the Ndosi Automation homepage&quot;)&#10;    public void i_am_on_the_ndosiautomation_home_page() {&#10;        WebDriverManager.chromedriver().setup();&#10;        driver = new ChromeDriver();&#10;        driver.get(&quot;https://gray-island-0bd788c1e.2.azurestaticapps.net/#overview&quot;);&#10;        driver.manage().window().maximize();&#10;        Allure.addAttachment(&quot;Home Page&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;    @When(&quot;I click on the \&quot;Learning Materials\&quot; tab&quot;)&#10;    public void i_click_on_the_learning_materials_tab() {&#10;        driver.findElement(By.xpath(&quot;//button[contains(@class, 'nav-btn') and normalize-space(text())='Learning Materials']&quot;)).click();&#10;        Allure.addAttachment(&quot;Learning Materials Page&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;    @And(&quot;I click on the \&quot;Sign Up\&quot; button&quot;)&#10;    public void i_click_on_the_signup_button() {&#10;        driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Sign Up Here']&quot;)).click();&#10;    }&#10;&#10;&#10;    @And(&quot;I fill in the registration form with valid details&quot;)&#10;    public void i_fill_in_the_registration_form_with_valid_details(DataTable dataTable) {&#10;        Map&lt;String, String&gt; formData = dataTable.asMap(String.class, String.class);&#10;&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='First Name' and @type='text']&quot;)).sendKeys(formData.get(&quot;FirstName&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Last Name' and @type='text']&quot;)).sendKeys(formData.get(&quot;LastName&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Email' and @type='email']&quot;)).sendKeys(formData.get(&quot;Email&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Password' and @type='password']&quot;)).sendKeys(formData.get(&quot;Password&quot;));&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Confirm Password' and @type='password']&quot;)).sendKeys(formData.get(&quot;ConfirmPassword&quot;));&#10;&#10;        Allure.addAttachment(&quot;Filled Registration Form&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;    }&#10;&#10;&#10;    @And(&quot;I submit the registration form&quot;)&#10;    public void i_submit_the_registration_form() {&#10;        driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Create Account']&quot;)).click();&#10;    }&#10;&#10;    @Then(&quot;I should see a confirmation message {string}&quot;)&#10;    public void i_should_see_a_confirmation_message(String expectedMessage) {&#10;        try {&#10;            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));&#10;            By confirmationMsgLocator = By.xpath(&quot;//*[contains(text(),'&quot; + expectedMessage + &quot;')]&quot;);&#10;            WebElement confirmationMessage = wait.until(ExpectedConditions.visibilityOfElementLocated(confirmationMsgLocator));&#10;&#10;            String popupText = confirmationMessage.getText();&#10;            Allure.addAttachment(&quot;Confirmation Message Screenshot&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;            Assert.assertEquals(popupText, expectedMessage);&#10;&#10;            // Wait for and click the OK button&#10;            WebElement okButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//button[normalize-space(text())='Ok']&quot;)));&#10;            okButton.click();&#10;        } catch (Exception e) {&#10;            Allure.addAttachment(&quot;Failure Screenshot&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;            throw e;&#10;        }&#10;    }&#10;&#10;    @When(&quot;I enter my password to log in&quot;)&#10;    public void i_enter_my_password_to_log_in(String password) {&#10;        driver.findElement(By.xpath(&quot;//input[@placeholder='Password' and @type='password']\&quot;&quot;)).sendKeys(password);&#10;&#10;    }&#10;&#10;    @And(&quot;I submit the login form&quot;)&#10;    public void i_submit_the_login_form() {&#10;        driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Login']&quot;)).click();&#10;&#10;    }&#10;&#10;    @Then(&quot;I should be logged in and see the logout button&quot;)&#10;    public void i_should_be_logged_in_and_see_the_logout_button() {&#10;        boolean isLogoutButtonPresent = driver.findElement(By.xpath(&quot;//button[normalize-space(text())='Logout']&quot;)).isDisplayed();&#10;        Assert.assertTrue(isLogoutButtonPresent, &quot;Logout button is not displayed, login might have failed.&quot;);&#10;        Allure.addAttachment(&quot;Logout Button Visible&quot;, new ByteArrayInputStream(((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES)));&#10;        driver.quit();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/resources/features/Login.feature">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/resources/features/Login.feature" />
              <option name="originalContent" value="Feature: Login to saucedemo&#10;  Scenario: Successful login with valid credentials&#10;    Given I am on the saucedemo login page&#10;    When I login with username &quot;standard_user&quot; and password &quot;secret_sauce&quot;&#10;    Then I should see the products page&#10;&#10;" />
              <option name="updatedContent" value="Feature: Login to saucedemo&#10;&#10;  Scenario Outline: Successful login with valid credentials&#10;    Given I am on the saucedemo login page&#10;    When I login with username &quot;&lt;username&gt;&quot; and password &quot;&lt;password&gt;&quot;&#10;    Then I should see the products page&#10;&#10;    Examples:&#10;      | username        | password      |&#10;      | standard_user   | secret_sauce  |&#10;      | locked_out_user | secret_sauce  |&#10;      | problem_user    | secret_sauce  |" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/test/resources/features/Registration.feature">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/resources/features/Registration.feature" />
              <option name="originalContent" value="Feature: Sign Up and Login  on Ndosi Automation&#10;&#10;&#10;  Scenario: Navigate to Learning Materials, Sign Up, and Login&#10;    Given I am on the Ndosi Automation homepage&#10;    When I click on the &quot;Learning Materials&quot; tab&#10;    And I click on the &quot;Sign Up&quot; button&#10;    And I fill in the registration form with valid details&#10;      | Field           | Value            |&#10;      | FirstName       | Tata             |&#10;      | LastName        | Mk            |&#10;      | Email           | TMK@example.com |&#10;      | Password        | Pass1234         |&#10;      | ConfirmPassword | Pass1234         |&#10;    And I submit the registration form&#10;    Then I should see a confirmation message &quot;Registration successful! Please login with your credentials.&quot;&#10;    When I enter my password to log in&#10;    And I submit the login form&#10;    Then I should be logged in and see the page title &quot;Practice Assessments&quot;&#10;" />
              <option name="updatedContent" value="Feature: Sign Up and Login on Ndosi Automation&#10;&#10;  Scenario Outline: Navigate to Learning Materials, Sign Up, and Login&#10;    Given I am on the Ndosi Automation homepage&#10;    When I click on the &quot;Learning Materials&quot; tab&#10;    And I click on the &quot;Sign Up&quot; button&#10;    And I fill in the registration form with valid details&#10;      | Field           | Value            |&#10;      | FirstName       | &lt;FirstName&gt;      |&#10;      | LastName        | &lt;LastName&gt;       |&#10;      | Email           | &lt;Email&gt;          |&#10;      | Password        | &lt;Password&gt;       |&#10;      | ConfirmPassword | &lt;ConfirmPassword&gt; |&#10;    And I submit the registration form&#10;    Then I should see a confirmation message &quot;Registration successful! Please login with your credentials.&quot;&#10;    When I enter my password to log in&#10;    And I submit the login form&#10;    Then I should be logged in and see the page title &quot;Practice Assessments&quot;&#10;&#10;  Examples:&#10;    | FirstName | LastName | Email            | Password | ConfirmPassword |&#10;    | Tata      | Mk       | TMK@example.com  | Pass1234 | Pass1234        |&#10;    | John      | Doe      | john.doe@test.com| Test1234 | Test1234        |" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>